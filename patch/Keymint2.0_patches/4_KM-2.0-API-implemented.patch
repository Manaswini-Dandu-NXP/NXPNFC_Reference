From 017eb1a55e5b40f30300fdcb56a5a566eff61b1a Mon Sep 17 00:00:00 2001
From: nxf32288 <ganesh.deva_1@nxp.com>
Date: Mon, 25 Apr 2022 09:59:49 +0530
Subject: [PATCH 5/6] [artf957643]: KM 2.0 API implemented.

1) getRootOfTrustChallenge command mapped with INS 0xD0.
2) sendRootOfTrust command mapped with INS 0xD1.

Signed-off-by: Ganesh Devaraj <ganesh.deva_1@nxp.com>
---
 keymint/JavacardKeyMintDevice.cpp | 28 +++++++++++++++++++++++-----
 keymint/JavacardSecureElement.h   | 25 +++++++++++++++++++++++--
 2 files changed, 46 insertions(+), 7 deletions(-)

diff --git a/keymint/JavacardKeyMintDevice.cpp b/keymint/JavacardKeyMintDevice.cpp
index 03559ce..c068aac 100644
--- a/keymint/JavacardKeyMintDevice.cpp
+++ b/keymint/JavacardKeyMintDevice.cpp
@@ -388,17 +388,35 @@ ScopedAStatus JavacardKeyMintDevice::getKeyCharacteristics(
     return ScopedAStatus::ok();
 }
 
-ScopedAStatus JavacardKeyMintDevice::getRootOfTrustChallenge(__attribute__((unused)) std::array<uint8_t, 16>* _aidl_return) {
-    return km_utils::kmError2ScopedAStatus(KM_ERROR_UNIMPLEMENTED);
+ScopedAStatus JavacardKeyMintDevice::getRootOfTrustChallenge(std::array<uint8_t, 16>* challenge) {
+    auto [item, err] = card_->sendRequest(Instruction::INS_GET_ROT_CHALLENGE_CMD);
+    if (err != KM_ERROR_OK) {
+        LOG(ERROR) << "Error in getRootOfTrustChallenge.";
+        return km_utils::kmError2ScopedAStatus(err);
+    }
+    std::vector<uint8_t> rotChallenge;
+    if (!cbor_.getBinaryArray(item, 1, rotChallenge) ||
+        (rotChallenge.size() != 16)) {
+        LOG(ERROR) << "Error in RotChallenge Data";
+        return km_utils::kmError2ScopedAStatus(KM_ERROR_UNKNOWN_ERROR);
+    }
+    std::copy_n(rotChallenge.begin(), 16, challenge->begin());
+    return ScopedAStatus::ok();
 }
 
 ScopedAStatus JavacardKeyMintDevice::getRootOfTrust(__attribute__((unused)) const std::array<uint8_t, 16>& in_challenge,
-                                  __attribute__((unused)) std::vector<uint8_t>* _aidl_return) {
+                                  __attribute__((unused)) std::vector<uint8_t>* rootOfTrust) {
     return km_utils::kmError2ScopedAStatus(KM_ERROR_UNIMPLEMENTED);
 }
 
-ScopedAStatus JavacardKeyMintDevice::sendRootOfTrust(__attribute__((unused)) const std::vector<uint8_t>& in_rootOfTrust) {
-    return km_utils::kmError2ScopedAStatus(KM_ERROR_UNIMPLEMENTED);
+ScopedAStatus JavacardKeyMintDevice::sendRootOfTrust(const std::vector<uint8_t>& in_rootOfTrust) {
+    std::vector<uint8_t> rootOfTrust(in_rootOfTrust);
+    auto [item, err] = card_->sendRequest(Instruction::INS_SEND_ROT_DATA_CMD, rootOfTrust);
+    if (err != KM_ERROR_OK) {
+        LOG(ERROR) << "Error in sendRootOfTrust.";
+        return km_utils::kmError2ScopedAStatus(err);
+    }
+    return ScopedAStatus::ok();
 }
 
 keymaster_error_t
diff --git a/keymint/JavacardSecureElement.h b/keymint/JavacardSecureElement.h
index eb91a76..216763c 100644
--- a/keymint/JavacardSecureElement.h
+++ b/keymint/JavacardSecureElement.h
@@ -13,7 +13,25 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
+/******************************************************************************
+*
+*  The original Work has been changed by NXP.
+*
+*  Licensed under the Apache License, Version 2.0 (the "License");
+*  you may not use this file except in compliance with the License.
+*  You may obtain a copy of the License at
+*
+*  http://www.apache.org/licenses/LICENSE-2.0
+*
+*  Unless required by applicable law or agreed to in writing, software
+*  distributed under the License is distributed on an "AS IS" BASIS,
+*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+*  See the License for the specific language governing permissions and
+*  limitations under the License.
+*
+*  Copyright 2022 NXP
+*
+******************************************************************************/
 #pragma once
 
 #include "CborConverter.h"
@@ -70,7 +88,10 @@ enum class Instruction {
     INS_UPDATE_EEK_CHAIN_CMD = KEYMINT_CMD_APDU_START + 31,
     INS_UPDATE_CHALLENGE_CMD = KEYMINT_CMD_APDU_START + 32,
     INS_FINISH_SEND_DATA_CMD = KEYMINT_CMD_APDU_START + 33,
-  INS_GET_RESPONSE_CMD = KEYMINT_CMD_APDU_START + 34,
+    INS_GET_RESPONSE_CMD = KEYMINT_CMD_APDU_START + 34,
+    INS_GET_ROT_CHALLENGE_CMD = KEYMINT_CMD_APDU_START + 0xB0,
+    INS_GET_ROT_DATA_CMD = KEYMINT_CMD_APDU_START + 0xB1,
+    INS_SEND_ROT_DATA_CMD = KEYMINT_CMD_APDU_START + 0xB2,
 };
 
 class JavacardSecureElement {
-- 
2.35.1

