From 47213e1b3c2288897e25696719854987b1b643b9 Mon Sep 17 00:00:00 2001
From: Sourav Kumar <sourav.kumar@nxp.com>
Date: Fri, 1 Jul 2022 12:06:38 +0530
Subject: [PATCH] [artf976320]: Fix for AesCbcZeroInputSuccess VTS failure

VTS test expects zero length output for input msg of length 0
for crypto operation involving Aes/CBC with Paddingmode as NONE.

Signed-off-by: Sourav Kumar <sourav.kumar@nxp.com>

Change-Id: Ic63f4e603043338e52a2717ac677a3469ed21140
---
 keymaster/4.1/JavacardKeymaster4Device.cpp   | 11 +++++++++
 keymaster/4.1/JavacardOperationContext.cpp   |  8 +++++++
 keymaster/include/JavacardOperationContext.h | 24 ++++++++++++++++++++
 3 files changed, 43 insertions(+)

diff --git a/keymaster/4.1/JavacardKeymaster4Device.cpp b/keymaster/4.1/JavacardKeymaster4Device.cpp
index e4698bb..5032a36 100644
--- a/keymaster/4.1/JavacardKeymaster4Device.cpp
+++ b/keymaster/4.1/JavacardKeymaster4Device.cpp
@@ -1351,6 +1351,17 @@ Return<void> JavacardKeymaster4Device::finish(uint64_t operationHandle, const hi
                     }
                 }
             }
+            if (errorCode == ErrorCode::INVALID_INPUT_LENGTH) {
+                if (data.size() == 0 && finish) {
+                    OperationInfo opInfo = oprCtx_->getOperationInfo(operationHandle);
+                    if ((opInfo.alg == Algorithm::AES || opInfo.alg == Algorithm::TRIPLE_DES) &&
+                        opInfo.inputProcessed == false && opInfo.pad == PaddingMode::NONE &&
+                        opInfo.mode != BlockMode::GCM) {
+                        errorCode = ErrorCode::OK;
+                        tempOut.clear();
+                    }
+                }
+            }
             return errorCode;
         };
         if(ErrorCode::OK == (errorCode = oprCtx_->finish(operationHandle, std::vector<uint8_t>(input),
diff --git a/keymaster/4.1/JavacardOperationContext.cpp b/keymaster/4.1/JavacardOperationContext.cpp
index 1f03c4a..e1415c5 100644
--- a/keymaster/4.1/JavacardOperationContext.cpp
+++ b/keymaster/4.1/JavacardOperationContext.cpp
@@ -100,6 +100,10 @@ ErrorCode OperationContext::setOperationInfo(uint64_t operationHandle, KeyPurpos
     return ErrorCode::OK;
 }
 
+OperationInfo OperationContext::getOperationInfo(uint64_t operationHandle) {
+    return operationTable[operationHandle].info;
+}
+
 ErrorCode OperationContext::clearOperationData(uint64_t operHandle) {
     LOGD_JC("operationHandle:" << operHandle);
     size_t size = operationTable.erase(operHandle);
@@ -360,6 +364,10 @@ ErrorCode OperationContext::handleInternalUpdate(uint64_t operHandle, std::vecto
                         opr, out))) {
             return errorCode;
         }
+        if (!finish && out.size() > 0) {
+            // update() has received/processed input data of atleast 1 byte
+            operationTable[operHandle].info.inputProcessed = true;
+        }
         //Call the callback under these condition
         //1. if it is a finish operation.
         //2. if there is some data to be send to Javacard.(either update or finish operation).
diff --git a/keymaster/include/JavacardOperationContext.h b/keymaster/include/JavacardOperationContext.h
index 0d452c6..1359ff3 100644
--- a/keymaster/include/JavacardOperationContext.h
+++ b/keymaster/include/JavacardOperationContext.h
@@ -14,6 +14,25 @@
  ** See the License for the specific language governing permissions and
  ** limitations under the License.
  */
+/******************************************************************************
+ *
+ *  The original Work has been changed by NXP.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ *  Copyright 2022 NXP
+ *
+ **********************************************************************************/
 
 #ifndef KEYMASTER_V4_1_JAVACARD_OPERATIONCONTEXT_H_
 #define KEYMASTER_V4_1_JAVACARD_OPERATIONCONTEXT_H_
@@ -62,6 +81,7 @@ struct OperationInfo {
     PaddingMode pad;
     BlockMode mode;
     uint32_t macLength;
+    bool inputProcessed;
 };
 
 /**
@@ -99,6 +119,10 @@ public:
      * handle.
      */
     ErrorCode setOperationInfo(uint64_t operationHandle, KeyPurpose purpose, Algorithm alg, const hidl_vec<KeyParameter>& params);
+    /**
+     * Get OperationInfo corresponding to the operation handle
+     */
+    OperationInfo getOperationInfo(uint64_t operationHandle);
     /**
      * This function clears the operation data from the map. Caller has to call this function once the operation is done
      * or if there is any error while processing the operation.
-- 
2.37.0

